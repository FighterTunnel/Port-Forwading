#!/bin/bash
# Fixed Netplan Configuration for Armbian
# Compatible with both Netplan and traditional networking

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Functions
show_status() {
    echo -e "${YELLOW}[$1]${NC} $2"
}

check_error() {
    if [ $? -ne 0 ]; then
        echo -e "${RED}Error:${NC} $1"
        [ "$2" == "fatal" ] && exit 1
    fi
}

# 1. Detect network configuration method
show_status "STEP 1" "Detecting network configuration method..."
if [ -d /etc/netplan ]; then
    CONFIG_METHOD="netplan"
elif [ -f /etc/network/interfaces ]; then
    CONFIG_METHOD="ifupdown"
else
    CONFIG_METHOD="unknown"
fi
show_status "INFO" "Detected method: $CONFIG_METHOD"

# 2. Detect main interface
show_status "STEP 2" "Detecting main interface..."
MAIN_IFACE=$(ip route | grep default | awk '{print $5}' | head -n1)
[ -z "$MAIN_IFACE" ] && MAIN_IFACE=$(ls /sys/class/net | grep -v lo | head -n1)
show_status "INFO" "Main interface: $MAIN_IFACE"

# 3. Configure based on detected method
case $CONFIG_METHOD in
    "netplan")
        show_status "STEP 3" "Configuring Netplan..."
        mkdir -p /etc/netplan/backup
        mv /etc/netplan/*.yaml /etc/netplan/backup/ 2>/dev/null
        
        cat > /etc/netplan/01-network.yaml <<EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    $MAIN_IFACE:
      dhcp4: true
      dhcp6: true
      accept-ra: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8, 2606:4700:4700::1111, 2001:4860:4860::8888]
EOF
        netplan generate
        netplan apply
        check_error "Netplan configuration failed" "fatal"
        ;;
        
    "ifupdown")
        show_status "STEP 3" "Configuring traditional networking..."
        # Configure IPv4 DHCP
        grep -q "iface $MAIN_IFACE inet dhcp" /etc/network/interfaces || {
            echo -e "\nauto $MAIN_IFACE\niface $MAIN_IFACE inet dhcp" >> /etc/network/interfaces
        }
        
        # Configure IPv6
        grep -q "iface $MAIN_IFACE inet6 auto" /etc/network/interfaces || {
            echo -e "iface $MAIN_IFACE inet6 auto\n  accept_ra 1\n  autoconf 1" >> /etc/network/interfaces
        }
        
        # Restart networking
        systemctl restart networking 2>/dev/null || /etc/init.d/networking restart
        check_error "Network restart failed" "warn"
        ;;
        
    *)
        show_status "ERROR" "Unsupported network configuration method"
        exit 1
        ;;
esac

# 4. Configure DNS (works for both methods)
show_status "STEP 4" "Configuring DNS..."
cat > /etc/resolv.conf <<EOF
nameserver 1.1.1.1
nameserver 8.8.8.8
nameserver 2606:4700:4700::1111
nameserver 2001:4860:4860::8888
options rotate
EOF
chattr +i /etc/resolv.conf 2>/dev/null

# 5. Enable IPv6 (skip problematic sysctl)
show_status "STEP 5" "Enabling IPv6 support..."
grep -q "net.ipv6.conf.all.disable_ipv6" /etc/sysctl.conf || {
    echo -e "net.ipv6.conf.all.disable_ipv6=0\nnet.ipv6.conf.default.disable_ipv6=0" >> /etc/sysctl.conf
}
sysctl -p 2>/dev/null

# 6. Verify configuration
show_status "STEP 6" "Verifying network..."
echo -e "\n${YELLOW}=== IP Addresses ===${NC}"
ip a show $MAIN_IFACE

echo -e "\n${YELLOW}=== IPv4 Connectivity ===${NC}"
ping -4 -c 2 8.8.8.8 | grep 'bytes from' || echo -e "${RED}IPv4 failed${NC}"

echo -e "\n${YELLOW}=== IPv6 Connectivity ===${NC}"
ping6 -c 2 2001:4860:4860::8888 | grep 'bytes from' || echo -e "${RED}IPv6 failed${NC}"

echo -e "\n${GREEN}Configuration completed!${NC}"
